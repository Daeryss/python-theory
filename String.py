#       строки в питон воспринимаются целым неделимым объектом
#       строку нельзя разделить или вычесть из нее, но можно сложить:
s1 = 'abc'
s2 = 'def'
print('1.   ', s1 + s2)
#       s1 + s2 = 'abcdef'
#       или строку можно умножить:

print('2.   ', s1 * 3)
#       результатом будет:
#       s1 * 3  = 'abcabcabc'
#
#       у строк есть параметры их символов:
#       0	1	2	3	4	5
#       S	t	r	i	n	g
#       -6	-5	-4	-3	-2	-1
#       так s[2] = s[-4] = 'r' (нельзя изменить сроку!! s[3] = 'd' выдаст ошибку
s = 'string'
print('3.   ', s[:])  # печать всей строки
print('4.   ', s[2:])  # печать сов торого символа до конца, включая второй
print('5.   ', s[:4])  # печать с начала до 4 символа, не включая 4-й
print('6.   ', s[2:5])  # печать со второго по 5, включая 2й и не включая 5й
#       любые операции со строкой подразумевают добавление третьего параметра:
print('7.   ', s[::-1])  # печать в обратном порядке
print('8.   ', s[5:1:-2], '- в данном случае в обратном порядке через один')
# печать в обратном порядке одразумевает,
# что сначала записывается правый символ
#
#
#       М_Е_Т_О_Д_Ы - записываются так: строка.метод -> s.find
#
#
#                       F_I_N_D // R_F_I_N_D
#       find - ищет первое вхождение подстроки с троку, выдавая номер символа вхождения
#       rfind - ищет последнее вхождение подстроки с троку, выдавая номер символа вхождения
a = s * 3
print('9.   ', a.find('i'))
print('10.  ', a.rfind('i'))
print('11.  ', a.find('ing', 7))    # поиск начиная с заданного учатка,
                                    # предыдущие вхождения не учитываюся
#       поиск всех вхождений подразумевает написание цикла:
print('12.   ', end='')
pos = a.find('ng')
while pos != -1:         # '-1' нужен для ситуации когда вхождений больше нет
    print(pos, end=' ')
    pos = a.find('ng', pos + 1)
print()
#
#                       R_E_P_L_A_C_E
#   replace не изменяет строку! он возвращает другую строку с заменой!
print('13.  ', s.replace('i', '1'), 'and', s)  # - s остался неизменным
print('14.  ', a.replace('i', '1', 2)) # - 2 означает количество замен
#
#                   C_O_U_N_T
#       количество вхождений подстроки в троку
print('15.  ', a.count('gs'))  # если вхождений нет, то результат 0
#
#
#
#
a = ' a-b'
a = a.split('-')
a = ''.join(map(str, a))

print(a)