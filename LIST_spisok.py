#                   С_П_И_С_К_И
#       Списки -  изменяемые объекты! Список представляет собой набор ссылок на
#       определнные объекты. Список обозначается[], во многом схож с кортежами.
a = [1, 2.43, 'a']  #  a - список
print('1.   ', a)
b = a
print('2.   ', b)   #  произошла замена нулевого элемента
                    #  тк b лишь ссылка на список, меняя сам список, меняем все
                    #  ссылавшиееся на него
a = [1, 2, 3]
b = a[:]
a[0] = 3
print('3.   ', b)   #  для создания неизменяемой копии списка используют команду
                    #  = a[:], где а - исходный копируемый список
print('4.   ', b[::-1])
s = 'string'
print('5.    s =', s)
s = list(s)                  # для перевода чего-либо в формат списка
print('      list(s) =', s)  # используется команда list(), например list(input())
#
#                   S_P_L_I_T
#       Метод split позволяет разделить строку на отдельные строки и записать в
#       список. По умолчанию разделителем является пробел, но можно указать любой.
a = 'abc def        hig'
print('6.    a =', a)
print('      a.split() =', a.split())
b = '111a222a333'
print('7.    b =', b)
print("      b.split('a') =", b.split('a'))
#
#                   M_A_P
#       map позволяет применять конкретные функуции, такие как len, str или int
#       к каждому члену списка
c = ['green', 'yellow', 'red']      #  для того, чтобы корректно вывести
print('8.    c =', c)               #  необходимо использовать list
print('      list(map(len, c)) =', list(map(len, c)))
#
#       для считывания ряда чисел и преобразования их в список используется:
#
#       num = list(map(int, input().split()))
#
#                   J_O_I_N
#       метод join необходим для объединения элементов списка в строку.
#       Join применим ТОЛЬКО к str объектам. Чтобы корректно вывести int,
#       необходимо сначала перевести его в str.
d = [1, 2, 3, 4, 5]
print('9.    d =', d)
print("      ' '.join(map(str, d)) =", ' '.join(map(str, d)))
#
#
#       к спискам также применимы следующие операции:
#       методы не меняющие список, но возвращающие значения:
#       count(x) - подсчитвает число вхождений подстроки в строку
#       index(x) - находит позицию первого вхождения подстроки
#       index(x, from) - находит позицию первого вхождения, начиная со строки
a = list('abcdefabc')
print('10.   a =', a)
print('      a.count("a") =', a.count('a'))
print('      a.index("d") =', a.index('d'))
print('      a.index("a", 2) =', a.index('a', 2))
#
#       методы не возвращающие значения, но меняющие список:
#       append(x) – добавляет в конец списка х
#       extend(otherList) - добавляет в конец списка другой список, в отличии
#       от a + b, не создает новый объект, а изменяет старый. Работает быстрее
#       remove(x) - удаляет первое вхождение конкретного элемента Х
#       insert(index, x) - втсавляет на Х под индексом index
#       reverse() - разворачивает список
a = list('abcdef')
b = list('ghk')
print('11.   a =', a, 'b =', b)
a.append('v')
print('      a.append("v") =', a)
a.extend(b)
print('      a.extend(b) =', a)
a.remove('k')
print("      a.remove('k') = ", a)
a.insert(3, 2)
print("      a.insert(3, 2) = ", a)
a.reverse()
print("      a.reverse() = ", a)
#
#       методы, возвращающие значения и изменяющие список:
#       pop() - возвращает последний элемент списка и удаляет его
#       pop(index) - возвращает элемент списка на позиции index и удаляет его.
a = list('abcdef')
print('12.   a =', a)
a.pop()
print('      a.pop() =', a)
a.append('f')
a.pop(3)
print('      a.pop(3) =', a)
#
#                   С_О_Р_Т_И_Р_О_В_К_А и С_Р_А_В_Н_Е_Н_И_Е
#       для сортировки данных списка есть две команды sort и sorted.
#       Данные упорядочиваются по неубыванию [3, 1, 2] => [1, 2, 3]
#       sort - изсеняет исходный список и безвозвратно меняет в нем порядок данных
#       sorted - создает упорядоченную копию списка
a = [1, 4, 2, 3, 2]
b = sorted(a)
print("13.   a = ", a)
print("      b = sorted(a)", b, 'a = ', a, 'a - остался неизменным')
a.sort()
print("      a.sort() = ", a)
print("      b = sorted(a, reverse=True)", sorted(a, reverse=True))
#
#       key - параметр для сортировки записывается в виде a.sort(key=...)
a = ['hgqd', 'zqc', 'abcdef']
print("14.   a = ", a)
a.sort()
print("      a.sort() = ", a)
a.sort(key=len)
print("      a.sort(key=len) = ", a)
#
#                   С_Р_А_В_Н_Е_Н_И_Е
#       Сравнение списков происходит посимвольно. Так, если первый член одного списка
#       больше первого члена другого списка, сравнение остановится. Можно сравнивать лишь
#       одинаковые данные (int c int или str c str, но не int c str). В случае, если все
#       данные равны, большим считается более длинный список.
a = [1, 2, 3]
b = [2, 3]
print("15.   a = ", a, '; b = ', b, '; a > b = ', a > b, sep='')
a = [1, 2, 3, "ab"]
b = [1, 2, 3]
print("      a = ", a, '; b = ', b, '; a > b = ', a > b, sep='')
#
#
#                   С_О_Р_Т_И_Р_О_В_К_А П_О_Д_С_Ч_Е_Т_О_М
count = list(map(int, input().split()))         #  вводимые данные
cnt = [0] * 11   #  создаем список с количеством ячеек соответствующих
                 # количеству разных элементов
for i in count:
    cnt[i] += 1  # прибавляем единицу в ту ячейку, номер которой выпал
for j in range(11):
    print((str(j) + ' ') * cnt[j], end=' ')
#
#
#
#
#
#

